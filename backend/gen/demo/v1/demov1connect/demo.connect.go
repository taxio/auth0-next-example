// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: demo/v1/demo.proto

package demov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taxio/auth0-next-example/backend/gen/demo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DemoServiceName is the fully-qualified name of the DemoService service.
	DemoServiceName = "demo.v1.DemoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DemoServiceGetMeProcedure is the fully-qualified name of the DemoService's GetMe RPC.
	DemoServiceGetMeProcedure = "/demo.v1.DemoService/GetMe"
	// DemoServiceUpdateSettingsProcedure is the fully-qualified name of the DemoService's
	// UpdateSettings RPC.
	DemoServiceUpdateSettingsProcedure = "/demo.v1.DemoService/UpdateSettings"
)

// DemoServiceClient is a client for the demo.v1.DemoService service.
type DemoServiceClient interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error)
}

// NewDemoServiceClient constructs a client for the demo.v1.DemoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDemoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DemoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &demoServiceClient{
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+DemoServiceGetMeProcedure,
			opts...,
		),
		updateSettings: connect.NewClient[v1.UpdateSettingsRequest, v1.UpdateSettingsResponse](
			httpClient,
			baseURL+DemoServiceUpdateSettingsProcedure,
			opts...,
		),
	}
}

// demoServiceClient implements DemoServiceClient.
type demoServiceClient struct {
	getMe          *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
	updateSettings *connect.Client[v1.UpdateSettingsRequest, v1.UpdateSettingsResponse]
}

// GetMe calls demo.v1.DemoService.GetMe.
func (c *demoServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// UpdateSettings calls demo.v1.DemoService.UpdateSettings.
func (c *demoServiceClient) UpdateSettings(ctx context.Context, req *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error) {
	return c.updateSettings.CallUnary(ctx, req)
}

// DemoServiceHandler is an implementation of the demo.v1.DemoService service.
type DemoServiceHandler interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error)
}

// NewDemoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDemoServiceHandler(svc DemoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	demoServiceGetMeHandler := connect.NewUnaryHandler(
		DemoServiceGetMeProcedure,
		svc.GetMe,
		opts...,
	)
	demoServiceUpdateSettingsHandler := connect.NewUnaryHandler(
		DemoServiceUpdateSettingsProcedure,
		svc.UpdateSettings,
		opts...,
	)
	return "/demo.v1.DemoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DemoServiceGetMeProcedure:
			demoServiceGetMeHandler.ServeHTTP(w, r)
		case DemoServiceUpdateSettingsProcedure:
			demoServiceUpdateSettingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDemoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDemoServiceHandler struct{}

func (UnimplementedDemoServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("demo.v1.DemoService.GetMe is not implemented"))
}

func (UnimplementedDemoServiceHandler) UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("demo.v1.DemoService.UpdateSettings is not implemented"))
}
